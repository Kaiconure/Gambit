{
  "about": {
    "author": "@Kaiconure",
    "description": "Provides a mechanism for scripted movement between points."
  },
  "vars": {
    "waypoints": {
      "routes": {},
      "active": "",
      "mode": "bounce",
      "max_aggro_range": 20,
      "max_aggro": 0,
      "scoped": false
    }
  },
  "actions": [
    {
      "when": [
        "not vars.waypoints.scoped",
        "vars.waypoints.mode == 'bounce'",
        "vars.waypoints.active and vars.waypoints.routes and vars.waypoints.routes[vars.waypoints.active]",
        "mobsInRange(vars.waypoints.max_aggro_range, true) < vars.waypoints.max_aggro or (actionType == 'idle' and not bt)",
        "(result and not checkPosition(result)) or bounceNearest(result or vars.waypoints.routes[vars.waypoints.active])"
      ],
      "commands": [
        "is_new_result and log('Bouncing to', vars.waypoints.active, 'location', result.x, result.y)",
        "move(result)"
      ],
      "delay": 1,
      "frequency": 2,
      "scope": "battle"
    },
    {
      "when": [
        "not vars.waypoints.scoped",
        "vars.waypoints.mode == 'cycle'",
        "vars.waypoints.active and vars.waypoints.routes and vars.waypoints.routes[vars.waypoints.active]",
        "mobsInRange(vars.waypoints.max_aggro_range, true) < vars.waypoints.max_aggro or (actionType == 'idle' and not bt)",
        "(result and not checkPosition(result)) or cycleNearest(result or vars.waypoints.routes[vars.waypoints.active])"
      ],
      "commands": [
        "is_new_result and log('Cycling to', vars.waypoints.active, 'location', result.x, result.y)",
        "move(result)"
      ],
      "delay": 1,
      "frequency": 2,
      "scope": "battle"
    },
    {
      "when": [
        "vars.waypoints.scoped",
        "vars.waypoints.mode == 'bounce'",
        "vars.waypoints.active and vars.waypoints.routes and vars.waypoints.routes[vars.waypoints.active]",
        "mobsInRange(vars.waypoints.max_aggro_range, true) < vars.waypoints.max_aggro or (actionType == 'idle' and not bt)",
        "(result and not checkPosition(result)) or bounceNearest(result or vars.waypoints.routes[vars.waypoints.active])"
      ],
      "commands": [
        "is_new_result and log('Bouncing to', vars.waypoints.active, 'location', result.x, result.y)",
        "move(result)"
      ],
      "delay": 1,
      "frequency": 2,
      "scope": "battle",
      "scoped_enumerators": true
    },
    {
      "when": [
        "vars.waypoints.scoped",
        "vars.waypoints.mode == 'cycle'",
        "vars.waypoints.active and vars.waypoints.routes and vars.waypoints.routes[vars.waypoints.active]",
        "mobsInRange(vars.waypoints.max_aggro_range, true) < vars.waypoints.max_aggro or (actionType == 'idle' and not bt)",
        "(result and not checkPosition(result)) or cycleNearest(result or vars.waypoints.routes[vars.waypoints.active])"
      ],
      "commands": [
        "is_new_result and log('Cycling to', vars.waypoints.active, 'location', result.x, result.y)",
        "move(result)"
      ],
      "delay": 1,
      "frequency": 2,
      "scope": "battle",
      "scoped_enumerators": true
    }
  ]
}
